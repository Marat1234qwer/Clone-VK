name: Test Server Connection

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: clone-vk
  SERVER_IP: 37.143.10.40
  SSH_PORT: 2222
  SSH_USER: admin
  CONTAINER_PORT: 5000
  HOST_PORT: 5002

on:
  workflow_dispatch:

jobs:
  test-connection:
    runs-on: ubuntu-latest
    
    steps:
    # Шаг 1: Получение кода из репозитория
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        # Создаем файл ключа и записываем в него содержимое секрета
        echo '${{ secrets.YC_SA_KEY }}' > key.json  # Используем одинарные кавычки!
        
        # Проверяем, что файл создан (опционально)
        # ls -la key.json
        # cat key.json | jq empty  # Проверка валидности JSON (если установлен jq)

    - name: Install YC CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i
        /home/runner/yandex-cloud/bin/yc --version
        /home/runner/yandex-cloud/bin/yc config set service-account-key key.json
        /home/runner/yandex-cloud/bin/yc config set folder-id b1gbg64nvnbues4n0i9k
        /home/runner/yandex-cloud/bin/yc config set compute-default-zone ru-central1-a
        /home/runner/yandex-cloud/bin/yc config list  # Проверка настроек (опционально)

    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest .

    - name: Login to YCR
      run: |
        # 2. Получаем IAM-токен (используем полный путь к yc)
        IAM_TOKEN=$(/home/runner/yandex-cloud/bin/yc iam create-token)
        
        # 3. Логинимся в реестр
        echo "$IAM_TOKEN" | docker login \
          --username iam \
          --password-stdin \
          cr.yandex



    # Шаг 5: Публикация образа в YCR
    - name: Push to YCR
      run: |
        docker push ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest




    # Шаг 6: Деплой на production-сервер
    - name: Deploy to Server
      run: |
        ssh -o StrictHostKeyChecking=no \
            -i <(echo "${{ secrets.SERVER_SSH_KEY }}") \
            -p ${{ env.SSH_PORT }} \
            ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "
          # Обновляем образ и перезапускаем контейнер
          docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest && \
          docker stop ${{ env.IMAGE_NAME }} || true && \
          docker rm ${{ env.IMAGE_NAME }} || true && \
          docker run -d \
            --name ${{ env.IMAGE_NAME }} \
            --restart unless-stopped \
            -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
            ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest"
